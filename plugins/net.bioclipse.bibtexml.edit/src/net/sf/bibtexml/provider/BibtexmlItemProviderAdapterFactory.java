/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.bibtexml.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.bibtexml.util.BibtexmlAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BibtexmlItemProviderAdapterFactory extends BibtexmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public BibtexmlItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.ArticleType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ArticleTypeItemProvider articleTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.ArticleType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createArticleTypeAdapter() {
        if (articleTypeItemProvider == null) {
            articleTypeItemProvider = new ArticleTypeItemProvider(this);
        }

        return articleTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.BibTeXMLEntriesClass} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BibTeXMLEntriesClassItemProvider bibTeXMLEntriesClassItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.BibTeXMLEntriesClass}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBibTeXMLEntriesClassAdapter() {
        if (bibTeXMLEntriesClassItemProvider == null) {
            bibTeXMLEntriesClassItemProvider = new BibTeXMLEntriesClassItemProvider(this);
        }

        return bibTeXMLEntriesClassItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.BookletType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BookletTypeItemProvider bookletTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.BookletType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBookletTypeAdapter() {
        if (bookletTypeItemProvider == null) {
            bookletTypeItemProvider = new BookletTypeItemProvider(this);
        }

        return bookletTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.BookType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BookTypeItemProvider bookTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.BookType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBookTypeAdapter() {
        if (bookTypeItemProvider == null) {
            bookTypeItemProvider = new BookTypeItemProvider(this);
        }

        return bookTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.ConferenceType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConferenceTypeItemProvider conferenceTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.ConferenceType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConferenceTypeAdapter() {
        if (conferenceTypeItemProvider == null) {
            conferenceTypeItemProvider = new ConferenceTypeItemProvider(this);
        }

        return conferenceTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.EntryType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EntryTypeItemProvider entryTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.EntryType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEntryTypeAdapter() {
        if (entryTypeItemProvider == null) {
            entryTypeItemProvider = new EntryTypeItemProvider(this);
        }

        return entryTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.FileType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FileTypeItemProvider fileTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.FileType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFileTypeAdapter() {
        if (fileTypeItemProvider == null) {
            fileTypeItemProvider = new FileTypeItemProvider(this);
        }

        return fileTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.InbookType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InbookTypeItemProvider inbookTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.InbookType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInbookTypeAdapter() {
        if (inbookTypeItemProvider == null) {
            inbookTypeItemProvider = new InbookTypeItemProvider(this);
        }

        return inbookTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.IncollectionType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IncollectionTypeItemProvider incollectionTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.IncollectionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIncollectionTypeAdapter() {
        if (incollectionTypeItemProvider == null) {
            incollectionTypeItemProvider = new IncollectionTypeItemProvider(this);
        }

        return incollectionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.InproceedingsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InproceedingsTypeItemProvider inproceedingsTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.InproceedingsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInproceedingsTypeAdapter() {
        if (inproceedingsTypeItemProvider == null) {
            inproceedingsTypeItemProvider = new InproceedingsTypeItemProvider(this);
        }

        return inproceedingsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.ManualType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ManualTypeItemProvider manualTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.ManualType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createManualTypeAdapter() {
        if (manualTypeItemProvider == null) {
            manualTypeItemProvider = new ManualTypeItemProvider(this);
        }

        return manualTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.MastersthesisType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MastersthesisTypeItemProvider mastersthesisTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.MastersthesisType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMastersthesisTypeAdapter() {
        if (mastersthesisTypeItemProvider == null) {
            mastersthesisTypeItemProvider = new MastersthesisTypeItemProvider(this);
        }

        return mastersthesisTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.MiscType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MiscTypeItemProvider miscTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.MiscType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMiscTypeAdapter() {
        if (miscTypeItemProvider == null) {
            miscTypeItemProvider = new MiscTypeItemProvider(this);
        }

        return miscTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.PhdthesisType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhdthesisTypeItemProvider phdthesisTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.PhdthesisType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhdthesisTypeAdapter() {
        if (phdthesisTypeItemProvider == null) {
            phdthesisTypeItemProvider = new PhdthesisTypeItemProvider(this);
        }

        return phdthesisTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.ProceedingsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProceedingsTypeItemProvider proceedingsTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.ProceedingsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProceedingsTypeAdapter() {
        if (proceedingsTypeItemProvider == null) {
            proceedingsTypeItemProvider = new ProceedingsTypeItemProvider(this);
        }

        return proceedingsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.TechreportType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TechreportTypeItemProvider techreportTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.TechreportType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTechreportTypeAdapter() {
        if (techreportTypeItemProvider == null) {
            techreportTypeItemProvider = new TechreportTypeItemProvider(this);
        }

        return techreportTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.sf.bibtexml.UnpublishedType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UnpublishedTypeItemProvider unpublishedTypeItemProvider;

    /**
     * This creates an adapter for a {@link net.sf.bibtexml.UnpublishedType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUnpublishedTypeAdapter() {
        if (unpublishedTypeItemProvider == null) {
            unpublishedTypeItemProvider = new UnpublishedTypeItemProvider(this);
        }

        return unpublishedTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (articleTypeItemProvider != null) articleTypeItemProvider.dispose();
        if (bibTeXMLEntriesClassItemProvider != null) bibTeXMLEntriesClassItemProvider.dispose();
        if (bookletTypeItemProvider != null) bookletTypeItemProvider.dispose();
        if (bookTypeItemProvider != null) bookTypeItemProvider.dispose();
        if (conferenceTypeItemProvider != null) conferenceTypeItemProvider.dispose();
        if (documentRootItemProvider != null) documentRootItemProvider.dispose();
        if (entryTypeItemProvider != null) entryTypeItemProvider.dispose();
        if (fileTypeItemProvider != null) fileTypeItemProvider.dispose();
        if (inbookTypeItemProvider != null) inbookTypeItemProvider.dispose();
        if (incollectionTypeItemProvider != null) incollectionTypeItemProvider.dispose();
        if (inproceedingsTypeItemProvider != null) inproceedingsTypeItemProvider.dispose();
        if (manualTypeItemProvider != null) manualTypeItemProvider.dispose();
        if (mastersthesisTypeItemProvider != null) mastersthesisTypeItemProvider.dispose();
        if (miscTypeItemProvider != null) miscTypeItemProvider.dispose();
        if (phdthesisTypeItemProvider != null) phdthesisTypeItemProvider.dispose();
        if (proceedingsTypeItemProvider != null) proceedingsTypeItemProvider.dispose();
        if (techreportTypeItemProvider != null) techreportTypeItemProvider.dispose();
        if (unpublishedTypeItemProvider != null) unpublishedTypeItemProvider.dispose();
    }

}
